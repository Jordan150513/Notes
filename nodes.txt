每天一个问题
1、[super init]的作用超类完成自己的初始化工作

http://www.jianshu.com/p/9b36e1b636d8
对于self ＝ [super init]的思考：

对象初始化有两种方式：[class new] 与 [[class alloc] init]
［［class alloc］ init］有分配和初始化的过程，alloc 从应用程序的虚拟地址空间上为该对象分配足够的内存，并且将新对象的引用计数加1、将对象的成员变量初始为零，init 会做真正的初使化工作，为对象的实例变量赋予合理有用的值。

[class new]默认调用 alloc与init方法，那么我们无法使用自定义的初始化方法，多了更多的局限性。那么[class alloc] init] 会更方便

为什么这样写？
- (instancetype)init
{
    if (self = [super init]) {
        // Custom initialization
    }
    return self;
}
alloc返回一个有效的未初始化的对象实例。对于self是alloc 返回的指针，同时可以在所有的方法作用域内访问。
但是对于 super，它只是一个 "编译器指示符",告诉编译器在父类中搜索方法的实现。
优先调用[super init] 是为了使超类完成它们自己的初始化工作。
if (self = [super init])
防止父类初始化失败，如果初始化一个对象失败，就会返回nil，当返回nil的时候self = [super init]测试的主体就不会再继续执行。如果不这样做，你可能会操作一个不可用的对象，它的行为是不可预测的，最终可能会导致你的程序崩溃
理解 Self & Super

@implementation Son : Father
- (id)init
{
    self = [super init];
    if (self)
    {
        NSLog(@"%@", NSStringFromClass([self class]));
        NSLog(@"%@", NSStringFromClass([super class]));
    }
    return self;
}
@end

self表示当前这个类的对象，而super是一个编译器标示符，和self指向同一个消息接受者。在本例中，无论是[self class]还是[super class]，接受消息者都是Son对象，但super与self不同的是，self调用class方法时，是在子类Son中查找方法，而super调用class方法时，是在父类Father中查找方法。
objc_msgSend（）
objc_msgSendSuper（）

类，父lei，meta class的图？？？？
找到之后补充在这里


引申：
isKindOfClass和isMemberOfClass的区别：
    QDSon * son1 = [[QDSon alloc] init];
    QDSon * son2 = [QDSon new];
    NSLog(@"%@",[son1 class]);
    NSLog(@"%d",[son1 isKindOfClass:[QDSon class]]);//1
    NSLog(@"%d", [son1 isKindOfClass:[QDFather class]]);//1
    NSLog(@"%d",[son1 isMemberOfClass:[QDSon class]]);//1
    NSLog(@"%d",[son1 isMemberOfClass:[QDFather class]]);//0
    
    //isKindOfClass 判断 认可继承关系 判断是否是本类及子类
    //isMemberOfClass 判断 不认可继承关系 判断是否是本类





2、画圆，画圆角4+1（CC）=5中方式   第一种：使用drawRect方法绘图自定义一个View，在其drawRect方法中操作，尽量避免使用drawRect方法，会耗性能，资源浪费	- (void)drawRect:(CGRect)rect {//一个不透明类型的Quartz 2D绘画环境，相当于一个画布,你可以在上面任意绘画 //获取绘图上下文       CGContextRef context = UIGraphicsGetCurrentContext();设置各种字体颜色 格式最后用CGContextDrawPath方法，画在画布上   CGContextDrawImage画图片} 第二种：设置secondView.layer.cornerRadius = 50;    secondView.layer.masksToBounds = YES;     会引起离屏渲染第三种：使用贝塞尔曲线UIBezierPath和Core Graphics框架在图片的绘图上下文中画出一个透明的圆。增加CPU负担，增加内存开销    UIImageView *imageViewTwo = [[UIImageView alloc]initWithFrame:CGRectMake(100, 100, 100, 100)];    imageViewTwo.image = [UIImage imageNamed:@"imageName1.jpg"];    //开始对imageView进行画图，在透明的这个imageView的画布上开始画    UIGraphicsBeginImageContextWithOptions(imageViewTwo.bounds.size, NO, [UIScreen mainScreen].scale);//    UIGraphicsBeginImageContextWithOptions(<#CGSize size#>, <#BOOL opaque#>, <#CGFloat scale#>)    //opaque：不透明    //使用贝塞尔曲线画出一个圆形图，并且切掉其他的，就剩下了透明的想要的那个圆    [[UIBezierPath bezierPathWithRoundedRect:imageViewTwo.bounds cornerRadius:imageViewTwo.frame.size.width] addClip];//    + (instancetype)bezierPathWithRoundedRect:(CGRect)rect cornerRadius:(CGFloat)cornerRadius;     //rounds all corners with the same horizontal and vertical radius    [imageViewTwo drawRect:imageViewTwo.bounds];        imageViewTwo.image = UIGraphicsGetImageFromCurrentImageContext();    //结束画图    UIGraphicsEndImageContext();    [self.view addSubview:imageViewTwo];          第四种：使用CAShapeLayer和UIBezierPath设置圆角，设置view.layer.mask同样会触发离屏渲染。    UIImageView *imageView = [[UIImageView alloc]initWithFrame:CGRectMake(100, 100, 100, 100)];    imageView.image = [UIImage imageNamed:@"imageName1.jpg"];        UIBezierPath *maskPath = [UIBezierPath bezierPathWithRoundedRect:imageView.bounds byRoundingCorners:UIRectCornerAllCorners cornerRadii:imageView.bounds.size];        CAShapeLayer *maskLayer = [[CAShapeLayer alloc]init];    //设置大小    maskLayer.frame = imageView.bounds;    //设置图形样子    maskLayer.path = maskPath.CGPath;    imageView.layer.mask = maskLayer;        [self.view addSubview:imageView];第五种：CC的方法，addsubLayerUIImageView * imageView = [[UIImageView alloc] initWithFrame:CGRectMake(0, 0, 80, 80)];            [imageView setImage:[UIImage imageNamed:@"AppIcon60x60"]];            CAShapeLayer * layer = [CAShapeLayer layer];            UIBezierPath * path = [UIBezierPath bezierPathWithRect:CGRectMake(0, 0, 80, 80)];            UIBezierPath * circlePath = [UIBezierPath bezierPathWithOvalInRect:CGRectMake(0, 0, 80, 80)];            [path appendPath:circlePath];            [path setUsesEvenOddFillRule:YES];            [path addClip];            layer.path = path.CGPath;//            layer.fillColor = [UIColor whiteColor].CGColor;//改成跟北京色一致的            layer.fillColor = [UIColor colorWithRed:240/255.f green:240/255.f blue:240/255.f alpha:1].CGColor;            layer.fillRule = kCAFillRuleEvenOdd;            [imageView.layer addSublayer:layer];            [cell.contentView addSubview:imageView]; 第六种：混合两个imageView，遮盖下面的那个，形成圆角需要切图配合，更直接的，就直接让切图给一个圆角图就可以了。总结：尽量避免重写 drawRect 方法。不恰当的使用这个方法会导致内存暴增。举个例子，iPhone6 上与屏幕等大的 UIView，即使重写一个空的 drawRect 方法，它也至少占用 750 * 1134 * 4 字节 ≈ 3.4 Mb 的内存。在 内存恶鬼drawRect 及其后续中，作者详细介绍了其中原理，据他测试，在 iPhone6 上空的、与屏幕等大的视图重写 drawRect 方法会消耗 5.2 Mb 内存。总之，能避免重写 drawRect 方法就尽可能避免。最基础的一种UIView.layer.cornerRadiusmaskToBounse =yes设置 masksToBounds 会导致离屏渲染，出现性能降低 label 的四周出现了黄色的标记，说明这里出现了离屏渲染高效设置圆角为普通的 UIView设置圆角，和为 UIImageView 设置圆角的原理截然不同。有什么不同？离屏渲染：指的是GPU在当前屏幕缓冲区以外新开辟一个缓冲区进行渲染操作。iOS 9.0 之前UIimageView跟UIButton设置圆角都会触发离屏渲染iOS 9.0 之后UIButton设置圆角会触发离屏渲染，而UIImageView里png图片设置圆角不会触发离屏渲染了，如果设置其他阴影效果之类的还是会触发离屏渲染的。3、tabBar左右滑动的问题再由tabBar的页面左右，左右滑动的时候，有时候，tabbar不能跟着页面滑动？
4、tableView加timer    什么情况下，timer不能正常的释放掉，什么可以使timer正常的释放掉。见YYFPSLabel的实现。
常见会有bug，tableview滚动会影响timer，tableview滚动的时候，咱阻塞timer，这说明timer添加到的RunLoop的mode不对，需要提高model的优先级，
有三个mode：
NSDefaultRunLoopMode - 标准优先级
NSRunLoopCommonModes -这种解决方式是将 Timer 加入到顶层的 RunLoop 的 "commonModeItems" 中。"commonModeItems" 被 RunLoop 自动更新到所有具有"Common"属性的 Mode 里去。
UITrackingRunLoopMode - 用于UIScrollView和别的控件的动画
5、客户详情的右上角的聚合按钮6、keyWindow的问题见仿写iOS系统的浮动聚合按钮的demo？？8、mjrefresh实现9、ASI   AFN10、srwebsocket  内部实现   保活机制12、界面等比放大13、ARC 下 viewdidload 中定义的变量什么时候会释放14、数据库升级
15、uicontrol   uiresponse16、block  为啥不能修改局部变量17、内存管理  strong weak18、自动释放池  三个，加到哪一个19、KVC   KVO21、static  22、http  和  https23、iOS目录结构24、framework   .a   静态库和动态库25、socket26、bitcode27、死锁产生的条件，怎么避免
四个必要条件：
1、互斥条件    
2、请求与保持   
3、不剥夺条件    
4、循环等待条件28、TCP和UDP

tcp协议和udp协议的差别 

             TCP           UDP 
是否连接      面向连接         面向非连接 
传输可靠性    可靠            不可靠 
应用场合      传输大量数据      少量数据 
速度         慢              快



TCP（Transmission Control Protocol，传输控制协议）是基于连接的协议，也就是说，在正式收发数据前，必须和对方建立可靠的连接。一个TCP连接必须要经过三次“对话”才能建立起来，其中的过程非常复杂，我们这里只做简单、形象的介绍，你只要做到能够理解这个过程即可。我们来看看这三次对话的简单过程：主机A向主机B发出连接请求数据包：“我想给你发数据，可以吗？”，这是第一次对话；主机B向主机A发送同意连接和要求同步（同步就是两台主机一个在发送，一个在接收，协调工作）的数据包：“可以，你什么时候发？”，这是第二次对话；主机A再发出一个数据包确认主机B的要求同步：“我现在就发，你接着吧！”，这是第三次对话。三次“对话”的目的是使数据包的发送和接收同步，经过三次“对话”之后，主机A才向主机B正式发送数据。 

UDP（User Data Protocol，用户数据报协议）是与TCP相对应的协议。它是面向非连接的协议，它不与对方建立连接，而是直接就把数据包发送过去！ 
  UDP适用于一次只传送少量数据、对可靠性要求不高的应用环境。比如，我们经常使用“ping”命令来测试两台主机之间TCP/IP通信是否正常，其实“ping”命令的原理就是向对方主机发送UDP数据包，然后对方主机确认收到数据包，如果数据包是否到达的消息及时反馈回来，那么网络就是通的。例如，在默认状态下，一次“ping”操作发送4个数据包（如图2所示）。大家可以看到，发送的数据包数量是4包，收到的也是4包（因为对方主机收到后会发回一个确认收到的数据包）。这充分说明了UDP协议是面向非连接的协议，没有建立连接的过程。正因为UDP协议没有连接的过程，所以它的通信效果高；但也正因为如此，它的可靠性不如TCP协议高。QQ就使用UDP发消息，因此有时会出现收不到消息的情况。 




网络的5层分层模型：
物理层，数据链路层，网络层，运输层，应用层

TCP/IP协议在分别是什么层的协议？
UDP层是什么层的协议，数据报

滑动窗口协议是哪个层的协议？





29、userdefault  存储的数据能通过物理路径找到吗31、深入理解RunLoop32、深入理解GCD
见GCDNotes.txt里面包括了1和2

3：dispatch source
4：dispatch queue挂起和dispatch queue目标锁定和信号量 




33、定时帧NSTimer和CADisplayLink
见博客http://www.cnblogs.com/Jordandan/p/6197273.html
定时帧




30、获取帧率见YYFPSLabel的实现，博客的记录





31、block中修改变量的问题

 block 的目的是为了支持并行编程，对于普通的 local 变量，我们就不能在 block 里面随意修改
（原因很简单，block 可以被多个线程并行运行，会有问题的）
   而且如果你在 block 中修改普通的 local 变量，编译器也会报错。那么该如何修改外部变量呢？
有两种办法，
第一种是可以修改 static变量把变量变成 全局变量；
第二种是可以修改用新关键字 __block 修饰的变量。

请看：
    NSAutoreleasePool * pool = [[NSAutoreleasePool alloc] init];
    
    __block int blockLocal  = 100;
    static int staticLocal  = 100;
    
    void (^aBlock)(void) = ^(void){ 
        NSLog(@" >> Sum: %d\n", global + staticLocal);
        
        global++;
        blockLocal++;
        staticLocal++;
    };
    
    aBlock();

    NSLog(@"After modified, global: %d, block local: %d, static local: %d\n", global, blockLocal, staticLocal);

    [pool release];

执行之后，值均为：101





32、
for 
for-in：快速枚举，对于可变数组进行枚举操作时，不能通过添加或删除对象等这类操作来改变数组容器,否则就会报错.而本身这种操作也是有问题的，数组容器已经改变，可能遍历到没有分配的位置，用for循环机器不能自己察觉，但是枚举器可以察觉。

EnumerateObjectsUsingBlock
enumerateKeysAndObjectsUsingBlock
enumerateObjectsWithOptions

1.
enumerateObjectsUsingBlock:^(id  _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {
        
    }

2.
enumerateObjectsWithOptions:<#(NSEnumerationOptions)#> usingBlock:^(id  _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {
        
    }

3.
enumerateObjectsAtIndexes:<#(nonnull NSIndexSet *)#> options:<#(NSEnumerationOptions)#> usingBlock:^(id  _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {
        
    }




33、instrument的使用
Timer Profiler时间分析器
Allocations 内存分配使用情况
内存泄露僵尸对象
循环引用
FPS
离屏渲染
CoreAnimation动画执行





34、内存划分五大区：
1、代码区
1、全局区，静态区：全局变量和静态变量的存储是放在一起的，初始化的全局变量和静态变量放在一块区域，未初始化的静态变量和未初始化的动态变量是在相邻的区域的，程序结束后系统释放。
3、常量区：常量字符串就是放在这里
4、栈：一般由编译器操作，会存放一些局部变量，等。
5、堆：一般由程序员管理，比如alloc申请内存，一般的对象都在堆区。（链表

35、
strong：
weak：

weak和strong不同的是：当一个对象不再有strong类型的指针指向它的时候 它会被释放  ，即使还有weak型指针指向它。
一旦最后一个strong型指针离去 ，这个对象将被释放，所有剩余的weak型指针都将被清除。

可能有个例子形容是妥当的。

想象我们的对象是一条狗，狗想要跑掉（被释放）。

strong型指针就像是栓住的狗。只要你用牵绳挂住狗，狗就不会跑掉。如果有5个人牵着一条狗（5个strong型指针指向1个对象），除非5个牵绳都脱落 ，否着狗是不会跑掉的。

weak型指针就像是一个小孩指着狗喊到：“看！一只狗在那” 只要狗一直被栓着，小孩就能看到狗，（weak指针）会一直指向它。只要狗的牵绳脱落，狗就会跑掉，不管有多少小孩在看着它。

只要最后一个strong型指针不再指向对象，那么对象就会被释放，同时所有的weak型指针都将会被清除。



copy：建立一个索引计数为1的对象，然后释放旧对象。对NSString。对NSString 


retain：释放旧的对象，将旧对象的值赋予输入对象，再提高输入对象的索引计数为1 。对其他NSObject和其子类 


copy和retain的区别：

copy其实是建立了一个相同的对象，而retain不是；

copy是内容拷贝，retain是指针拷贝；

copy是内容的拷贝 ,对于像NSString,的确是这样，但是如果拷贝的是NSArray这时只是copy了指向array中相对应元素的指针.这便是所谓的"浅复制"。



assign： 简单赋值，不更改索引计数（Reference Counting）。对基础数据类型 （NSInteger，CGFloat）和C数据类型（int, float, double, char, 等等）
unsafe_unretain：
autoreleaseing：



__block和__weak修饰符的区别：

__block不管是ARC还是MRC模式下都可以使用，可以修饰对象，还可以修饰基本数据类型。

__weak只能在ARC模式下使用，也只能修饰对象（NSString），不能修饰基本数据类型（int）。

__block对象可以在block中被重新赋值，__weak不可以。


36、分类和扩展：
扩展是无名分类，
扩展里面的属性，是私有的，子类也访问不了。
能为某个类附加额外的属性，成员变量，方法声明
一般的类扩展写到.m文件中
一般的私有属性写到类扩展


分类可以通过关联实现属性
分类只能扩充方法，不能扩展属性和成员变量（如果包含成员变量会直接报错）。
如果分类中声明了一个属性，那么分类只会生成这个属性的set、get方法声明，也就是不会有实现。
但是扩展不可以？？？不可以什么？？？不可以生成属性的set get方法

37、Charles实现对Https进行抓包，使用的原理就是中间人技术（man-in-the-middle）中间人技术（man-in-the-middle）：

38、
NSURLSession总结：

1、分有普通、上传和下载 三种不同的网络请求任务：
NSURLSessionDataTask, NSURLSessionUploadTask和NSURLSessionDownloadTask
2、创建的task都是挂起状态，需要resume才能执行。
3、NSURLSessionUploadTask下载文件，会默认下载到沙盒中的tem文件夹中，不会出现内存暴涨的情况，但在下载完成后会将tem中的临时文件删除，需要在初始化任务方法时，在completionHandler回调中增加保存文件的代码。

实例化网络下载任务时将下载的文件保存到沙盒的caches文件夹中：

[NSURLSessionDownloadTask [NSURLSessionDownloadTask *task = [session downloadTaskWithURL:[NSURL URLWithString:@"http://127.0.0.1/dawenjian.zip"] completionHandler:^(NSURL * _Nullable location, NSURLResponse * _Nullable response, NSError * _Nullable error) {
   //获取沙盒的caches路径
   NSString *path = [[NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES)lastObject]stringByAppendingPathComponent:@"kkk.dmg"];
   //生成URL路径
   NSURL *DCurl = [NSURL fileURLWithPath:path];
   //将文件保存到沙盒指定文件目录下
   [[NSFileManager defaultManager]moveItemAtURL:location toURL:DCurl error:nil];   }]resume];

4、NSURLSession有三个控制方法，取消（cancel），暂停（suspend），继续（resume），暂停后可以通过继续恢复当前的请求任务。

5、NSURLSession进行断点下载，当暂停下载任务后，如果 downloadTask （下载任务）为非空，调用 cancelByProducingResumeData:(void (^)(NSData *resumeData))completionHandler 这个方法，这个方法接收一个参数，完成处理代码块，这个代码块有一个 NSData 参数 resumeData，如果 resumeData 非空，我们就保存这个对象到视图控制器的 resumeData 属性中。在点击再次下载时，通过调用 
[ [self.session downloadTaskWithResumeData:self.resumeData]resume]方法进行继续下载操作。   

6、
NSURLSession的构造方法（sessionWithConfiguration:delegate:delegateQueue）中有一个 NSURLSessionConfiguration类的参数可以设置配置信息，其决定了cookie，安全和高速缓存策略，最大主机连接数，资源管理，网络超时等配置。NSURLConnection不能进行这个配置，相比于 NSURLConnection 依赖于一个全局的配置对象，缺乏灵活性而言，NSURLSession 有很大的改进了。

NSURLSession可以设置三种配置信息，分别通过调用三个累方法返回配置对象：

+ (NSURLSessionConfiguration *)defaultSessionConfiguration
配置信息使用基于硬盘的持久话Cache，保存用户的证书到钥匙串,使用共享cookie存储；
+ (NSURLSessionConfiguration *)ephemeralSessionConfiguration 
配置信息和default大致相同。除了，不会把cache，证书，或者任何和Session相关的数据存储到硬盘，而是存储在内存中，生命周期和Session一致。比如浏览器无痕浏览等功能就可以基于这个来做；
+ (NSURLSessionConfiguration *)backgroundSessionConfigurationWithIdentifier:(NSString *)identifier
配置信息可以创建一个可以在后台甚至APP已经关闭的时候仍然在传输数据的session。
注意，后台Session一定要在创建的时候赋予一个唯一的identifier，这样在APP下次运行的时候，能够根据identifier来进行相关的区分。如果用户关闭了APP,IOS 系统会关闭所有的background Session。而且，被用户强制关闭了以后，IOS系统不会主动唤醒APP，只有用户下次启动了APP，数据传输才会继续。

39、断点续传


40、各种锁汇总：

1、NSLock
遵循NSLocking协议

lock消息
unlock消息

连续锁两次会死锁，不能正常，多次的要用递归锁

2、NSRecursiveLock
可以被一个线程多次获得，而不会引起死锁
故名思议，是在递归中用的，不会引起死锁失效

3、NSCondition
算是同步锁
可以实现不同线程的调度
一个线程被某一个条件所阻塞，直到另一个线程满足该条件从而发送信号给该线程使得该线程可以正确的执行。
发送信号之后，解锁开锁。

4、NSConditionLock
NSConditionLock 对象所定义的互斥锁可以在使得在某个条件下进行锁定和解锁。
和 NSCondition 很像，但实现方式是不同的。
两个线程需要特定顺序执行的时候，例如生产者消费者模型，则可以使用 NSConditionLock 。当生产者执行执行的时候，消费者可以通过特定的条件获得锁，当生产者完成执行的时候，它将解锁该锁，然后把锁的条件设置成唤醒消费者线程的条件。锁定和解锁的调用可以随意组合，lock 和 unlockWithCondition: 配合使用 lockWhenCondition: 和 unlock 配合使用。

- (void)producer {
    while (YES) {
        [self.conditionLock lock];
        NSLog(@"have something");
        self.count++;
        [self.conditionLock unlockWithCondition:1];
    }
}

- (void)consumer {
    while (YES) {
        [self.conditionLock lockWhenCondition:1];
        NSLog(@"use something");
        self.count--;
        [self.conditionLock unlockWithCondition:0];
    }
}

5、pthread_mutex
互斥锁是一种超级易用的互斥锁，使用的时候，只需要初始化一个 pthread_mutex_t 用 pthread_mutex_lock 来锁定 pthread_mutex_unlock 来解锁，当使用完成后，记得调用 pthread_mutex_destroy 来销毁锁。

6、pthread_rwlock

读写锁，在对文件进行操作的时候，写操作是排他的，一旦有多个线程对同一个文件进行写操作，后果不可估量，但读是可以的，多个线程读取时没有问题的。

当读写锁被一个线程以读模式占用的时候，写操作的其他线程会被阻塞，读操作的其他线程还可以继续进行。
当读写锁被一个线程以写模式占用的时候，写操作的其他线程会被阻塞，读操作的其他线程也被阻塞。

7、POSIX Conditions
POSIX 条件锁需要互斥锁和条件两项来实现，虽然看起来没什么关系，但在运行时中，互斥锁将会与条件结合起来。线程将被一个互斥和条件结合的信号来唤醒。

首先初始化条件和互斥锁，当 ready_to_go 为 flase 的时候，进入循环，然后线程将会被挂起，直到另一个线程将 ready_to_go 设置为 true 的时候，并且发送信号的时候，该线程会才被唤醒。

8、OSSpinLock
自旋锁，和互斥锁类似，都是为了保证线程安全的锁。但二者的区别是不一样的，对于互斥锁，当一个线程获得这个锁之后，其他想要获得此锁的线程将会被阻塞，直到该锁被释放。但自选锁不一样，当一个线程获得锁之后，其他线程将会一直循环在哪里查看是否该锁被释放。所以，此锁比较适用于锁的持有者保存时间较短的情况下。
YY大神有

9、os_unfair_lock
iOS 10新出的解决自选锁失效的问题

10、dispatch_semaphore
信号量机制实现锁，等待信号，和发送信号，正如前边所说的看门人一样，当有多个线程进行访问的时候，只要有一个获得了信号，其他线程的就必须等待该信号释放。

11、@synchronized
一个便捷的创建互斥锁的方式，它做了其他互斥锁所做的所有的事情。


应当针对不同的操作使用不同的锁：

1、当进行文件读写的时候，使用 pthread_rwlock 较好，文件读写通常会消耗大量资源，而使用互斥锁同时读文件的时候会阻塞其他读文件线程，而 pthread_rwlock 不会。

2、当性能要求较高时候，可以使用 pthread_mutex 或者 dispath_semaphore，由于 OSSpinLock 不能很好的保证线程安全，而在只有在 iOS10 中才有 os_unfair_lock ，所以，前两个是比较好的选择。既可以保证速度，又可以保证线程安全。

3、对于 NSLock 及其子类，速度来说 NSLock < NSCondition < NSRecursiveLock < NSConditionLock 。


41、生产者消费者

42、NSCoreData

43、其他的本地化

44、
C语言的问题

45、数据结构的问题
链表，矩阵

46、swift的小demo

48、哈希碰撞解决方法：
1、线性的，往后推到下一个空的位置
2、非线性的，再一次哈希
3、链地址，在这个位置放置一个链表，放置哈西之后存在该位置的元素
4、建立一个公共溢出区，放置这些，这个没有印象啦


47、SDwebimage的源码复习

SDWebImageManager
SDWebImageDownloader


SD失效的问题可能解决方案：

1、有可能是图片的url地址不对，有可能浏览器可以打开，但是这个地址浏览器是做了处理的，所以浏览器能打开。

2、如果图片地址是Http，那么就需要关闭ATS。

ATS (App Transport Security)

新特性要求App内访问的网络必须使用HTTPS协议，

我们这里只是说明一下如何关闭该特性,让其可以访问http开头的网址.

关闭很简单,打开项目中的info.plist文件,在其中添加一个字典类型的项目App Transport Security Settings,然后在其中添加一个key:Allow Arbitrary Loads,其值为YES,


- (void)sd_setImageWithURL:(NSURL *)url placeholderImage:(UIImage *)placeholder options:(SDWebImageOptions)options progress:(SDWebImageDownloaderProgressBlock)progressBlock completed:(SDWebImageCompletionBlock)completedBlock 

有全能初始化方法（designated initializer）的概念，这个方法也就相当于是全能操作方法，所有的方法最后都会调用这个方法，都会集中到这个方法中执行

1、方法中先进行了一个关联
static char imageURLKey;
将传过来的url 设置成imageURLKey的value，由于imageURLKey是指向char类型的一个指针，所以是& imageURLKey，value是url。

2、placeholder有的话，先设置上placeholder图片

3、然后对非空的url进行图片的请求，交给了单例的SDWebImageManager，还有相应的SDWebImageOperation协议，以及相应的协议方法

id <SDWebImageOperation> operation 
协议中有唯一的
- (void)cancel;
方法

SDWebImageManager
中的方法
- (id <SDWebImageOperation>)downloadImageWithURL:(NSURL *)url
                                         options:(SDWebImageOptions)options
                                        progress:(SDWebImageDownloaderProgressBlock)progressBlock
                                       completed:(SDWebImageCompletionWithFinishedBlock)completedBlock {

里面还有一个self.failedURLs数组，所有的失败的url都会放里面，这个数组作为公共资源，需要考虑线程安全，所以用 @synchronized (self.failedURLs) {进行了加锁操作来访问和修改，这是对数据请求进行的优化，对于失败的url的数据请求进项了改进，不会一直请求失败的url占用资源。

5、然后对于正常的数据请求：

添加进入 runningOperations 之中。

还有一个重要的类SDWebImageCombinedOperation

@property (strong, nonatomic) NSOperation *cacheOperation;

cacheOperation是NSOperation




designate 
 | BrE ˈdɛzɪɡnət, AmE ˈdɛzɪɡnət, ˈdɛzɪɡˌneɪt |
formal (appointed)受委派而尚未上任的 shòu wěipài ér shàngwèi shàngrèn de (elected)已当选而尚未就职的 yǐ dāngxuǎn ér shàngwèi jiùzhí de
prime minister designate
新当选而尚未上任的首相


http://www.jianshu.com/p/4191017c8b39
SD总结：
SDWebImageAllowInvalidSSLCertificates 允许使用无效的SSL证书，主要用于测试目的，在正式环境中慎用
SDWebImageHighPriority 优先下载
SDWebImageDelayPlaceholder 等待下载完成后再显示占位图片，延迟显示占位图片
SDWebImageTransformAnimatedImage 改变动画形象
SDWebImageAvoidAutoSetImage 下载完成后手动设置图片，默认是下载完成后自动放到ImageView上

options 枚举：

1、SDWebImageRetryFailed 失败后重试， 默认如果下载失败,这个url会被加入黑名单并且不会尝试再次下载,设置这个枚举会阻止把失败的url加入黑名单，不断尝试重新下载

2、SDWebImageLowPriority 延迟下载， 默认情况下,图片会在交互发生的时候下载(例如你滑动tableview的时候),这个枚举会禁止这个特性,导致的结果就是在scrollview减速的时候才会开始下载(也就是你滑动的时候scrollview不下载,你手从屏幕上移走,scrollview开始减速的时候才会开始下载图片)

3、SDWebImageCacheMemoryOnly 只在内存缓存

4、SDWebImageProgressiveDownload 渐进式下载,显示的图像是逐步在下载

很重要
5、SDWebImageRefreshCached 刷新缓存，有时本地图片更新后与服务器没有同步一致时可以使用（例如更新头像），专门处理相同url，但不同image的情况的
原因：默认情况下，SDWebImage会忽略Header中的缓存设置，将图片以url为key进行保存，url与图片是一一对应关系。所以请求同一个url时，SDWebImage会从缓存中取得图片。一般的情况下用此方法可以满足我们的应用要求，但是如果你请求同一个url，而这张图片在服务器端更新了，本地客户端再次请求时还是会返回缓存中的旧图片，例如加载头像类经常更新的图片时，就会出现头像不能更新的问题，由于url与图片一一对应，一种解决的办法是改变部分url地址方式实现更新，不过这种方法操作起来很复杂， 另一种将第三个参数设置为SDWebImageRefreshCached就可以实现图片更新操作了。



6、SDWebImageContinueInBackground 启动后台下载，app进入后台后继续下载

7、SDWebImageHandleCookies 处理存储在NSHTTPCookieStore中的cookie
NSMutableURLRequest.HTTPShouldHandleCookies = YES;

8、SDWebImageAllowInvalidSSLCertificates 允许使用无效的SSL证书，主要用于测试目的，在正式环境中慎用

9、SDWebImageHighPriority 优先下载

10、SDWebImageDelayPlaceholder 等待下载完成后再显示占位图片，延迟显示占位图片

11、SDWebImageTransformAnimatedImage 改变动画形象

12、SDWebImageAvoidAutoSetImage 下载完成后手动设置图片，默认是下载完成后自动放到ImageView上


48、https

2017年1月24日—————————————————————————

49、遇到的一个问题的结局：
https验证证书的问题
问题描述：web页面有一个动态gif的表情一直不能成功显示出来，

<img src=“https://img2.soufun.com/bbsv2/face/em016.gif”>

用NSUrlSession请求之后，错误信息是这个：

Error Domain=NSURLErrorDomain Code=-1202 "此服务器的证书无效。您可能正在连接到一个伪装成“img2.soufun.com”的服务器，这会威胁到您的机密信息的安全。" UserInfo={NSURLErrorFailingURLPeerTrustErrorKey=<SecTrustRef: 0x608000116020>, NSLocalizedRecoverySuggestion=您仍要连接此服务器吗？, _kCFStreamErrorDomainKey=3, _kCFStreamErrorCodeKey=-9843, NSErrorPeerCertificateChainKey=(
    "<cert(0x7ffbba8ec000) s: *.cdn.myqcloud.com i: Symantec Class 3 Secure Server CA - G4>",
    "<cert(0x7ffbba8cc000) s: Symantec Class 3 Secure Server CA - G4 i: VeriSign Class 3 Public Primary Certification Authority - G5>",
    "<cert(0x7ffbba8eca00) s: VeriSign Class 3 Public Primary Certification Authority - G5 i: Class 3 Public Primary Certification Authority>",
    "<cert(0x7ffbba8cc800) s: Class 3 Public Primary Certification Authority i: Class 3 Public Primary Certification Authority>"
), NSUnderlyingError=0x61800024c900 {Error Domain=kCFErrorDomainCFNetwork Code=-1202 "(null)" UserInfo={_kCFStreamPropertySSLClientCertificateState=0, kCFStreamPropertySSLPeerTrust=<SecTrustRef: 0x608000116020>, _kCFNetworkCFStreamSSLErrorOriginalValue=-9843, _kCFStreamErrorDomainKey=3, _kCFStreamErrorCodeKey=-9843, kCFStreamPropertySSLPeerCertificates=(
    "<cert(0x7ffbba8ec000) s: *.cdn.myqcloud.com i: Symantec Class 3 Secure Server CA - G4>",
    "<cert(0x7ffbba8cc000) s: Symantec Class 3 Secure Server CA - G4 i: VeriSign Class 3 Public Primary Certification Authority - G5>",
    "<cert(0x7ffbba8eca00) s: VeriSign Class 3 Public Primary Certification Authority - G5 i: Class 3 Public Primary Certification Authority>",
    "<cert(0x7ffbba8cc800) s: Class 3 Public Primary Certification Authority i: Class 3 Public Primary Certification Authority>"
)}}, NSLocalizedDescription=此服务器的证书无效。您可能正在连接到一个伪装成“img2.soufun.com”的服务器，这会威胁到您的机密信息的安全。, NSErrorFailingURLKey=https://img2.soufun.com/bbsv2/face/em016.gif, NSErrorFailingURLStringKey=https://img2.soufun.com/bbsv2/face/em016.gif, NSErrorClientCertificateStateKey=0}

是https客户端需要验证这个域名的自签名证书的问题，

后查实，项目中的图片的域名需要进行收敛操作，只有将域名进行收敛操作之后，相应的域名的站点才有相应的证书，收敛表情上传之前的表情的url即可。相应的域名受凉犯法也根据需求扩充了一下。

还有我新加入的头像也显示不正常，猜测也是这个问题。


1月23日 MT有关问题总结：

问题总结，
1、有关推送的
2、有关weak原理的
3、加分隔符的
4、快排
5、load 和 initlizer 分别做什么工作。
6、swizzling
7、实现能力

自己太大意了，最基础的都没有做好，希望自己认识自己，改正不足的地方。
感谢MT，感谢我的朋友。感谢一直陪伴我的CC，我会努力的。

3、用户头像不能显示的问题：

web页中的url
http://img8.soufunimg.com/viewimage/zxb/2015_11/12/m05/01/c8/wkgeqlzemjmibv3qaaqajiha7kyaajzrandul4abbqk579/156x156c.jpg"

http://img8.soufunimg.com/viewimage/zxb/2015_11/12/M05/01/C8/wKgEQlZEMjmIbv3qAAQajIhA7kYAAJzRANDUL4ABBqk579/156x156c.jpg


img src的路径就有问题
虽然域名协议不区分大小写
但是路径可能区分大小写
所以 一模一样的url img 的src 是小写的
访问不到这个图片
我的 url是大小写区分的 可以访问到
所以 这个图片本身就访问不到 现在做收敛了也找不到
只能这个图片能访问到了 才能做收敛




